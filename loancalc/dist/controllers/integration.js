"use strict";var __decorate=this&&this.__decorate||function(a,b,e,f){var g,d=arguments.length,c=3>d?b:null===f?f=Object.getOwnPropertyDescriptor(b,e):f;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(a,b,e,f);else for(var h=a.length-1;0<=h;h--)(g=a[h])&&(c=(3>d?g(c):3<d?g(b,e,c):g(b,e))||c);return 3<d&&c&&Object.defineProperty(b,e,c),c},__awaiter=this&&this.__awaiter||function(a,b,c,d){return new(c||(c=Promise))(function(e,f){function g(a){try{i(d.next(a))}catch(a){f(a)}}function h(a){try{i(d["throw"](a))}catch(a){f(a)}}function i(a){a.done?e(a.value):new c(function(b){b(a.value)}).then(g,h)}i((d=d.apply(a,b||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const serve_1=require("../serve"),models_1=require("../graph/clients/models"),config=require("config"),node_fetch_1=require("node-fetch"),url_1=require("url"),MailChimp={AUTHORIZE_URI:"https://login.mailchimp.com/oauth2/authorize",ACCESS_TOKEN_URI:"https://login.mailchimp.com/oauth2/token",METADATA:"https://login.mailchimp.com/oauth2/metadata"};class IntegrationController extends serve_1.Controller{constructor(){super(),this.facebookAppId=config.get("facebook.appId"),this.facebookAppSecret=config.get("facebook.appSecret"),this.mailchimpClientId=config.get("mailchimp.clientId"),this.mailchimpClientSecret=config.get("mailchimp.clientSecret")}tempToken({context:a,app:b,params:c}){return __awaiter(this,void 0,void 0,function*(){const b=c.cuuid,d=new models_1.Clients,e=yield d.createTempId(b);a.response.status=200,a.response.type="text/plain",a.response.body="TEMP UUID: "+e.uuid})}mailchimpLoginStart({context:a,app:b,params:c}){return __awaiter(this,void 0,void 0,function*(){const b=c.tempid;serve_1.RouteUtil.redirectTemporarily(a,serve_1.RouteUtil.createURL(MailChimp.AUTHORIZE_URI,{response_type:"code",client_id:this.mailchimpClientId,redirect_uri:serve_1.RouteUtil.resolveURL("/int/mailchimp/loggedin/"+b)}))})}mailchimpLoginComplete({context:a,app:b,params:c}){return __awaiter(this,void 0,void 0,function*(){const{request:b}=a;try{const a=b.query.code,d=c.tempid;if(a){const b=new url_1.URLSearchParams({grant_type:"authorization_code",client_id:this.mailchimpClientId,client_secret:this.mailchimpClientSecret,redirect_uri:serve_1.RouteUtil.resolveURL("/int/mailchimp/loggedin/"+d),code:a}),c=yield node_fetch_1.default(MailChimp.ACCESS_TOKEN_URI,{method:"POST",body:b.toString(),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).then((a)=>a.json());if(isMailChimpAccessObject(c)){const a=new models_1.Clients,b=yield a.getClientIdFromTemp(d,!0);b?yield a.setMailChimpAccessTokenForClient(b.uuid,c.access_token):serve_1.Logger.warn("Bad temp client ID passed to mailchimp loggedIn: ",d)}else serve_1.Logger.warn("Received bad access object from mailchimp.",c)}else serve_1.Logger.warn("MailChimp loggedin accessed without code.")}catch(a){serve_1.Logger.error("Error while processing MailChimp login: ",a)}serve_1.RouteUtil.redirectTemporarily(a,serve_1.RouteUtil.resolveURL("/sdash/index.html#/dash/settings/connections"))})}}__decorate([serve_1.get("/int/temptoken/:cuuid([\\w-]+)")],IntegrationController.prototype,"tempToken",null),__decorate([serve_1.get("/int/mailchimp/login/:tempid([\\w-]+)")],IntegrationController.prototype,"mailchimpLoginStart",null),__decorate([serve_1.get("/int/mailchimp/loggedin/:tempid([\\w-]+)")],IntegrationController.prototype,"mailchimpLoginComplete",null),exports.default=IntegrationController;function isMailChimpAccessObject(a){return a&&"object"==typeof a&&"string"==typeof a.access_token&&a.hasOwnProperty("expires_in")&&a.hasOwnProperty("scope")}