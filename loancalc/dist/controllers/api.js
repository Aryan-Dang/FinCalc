"use strict";var __decorate=this&&this.__decorate||function(a,b,e,f){var g,d=arguments.length,c=3>d?b:null===f?f=Object.getOwnPropertyDescriptor(b,e):f;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(a,b,e,f);else for(var h=a.length-1;0<=h;h--)(g=a[h])&&(c=(3>d?g(c):3<d?g(b,e,c):g(b,e))||c);return 3<d&&c&&Object.defineProperty(b,e,c),c},__awaiter=this&&this.__awaiter||function(a,b,c,d){return new(c||(c=Promise))(function(e,f){function g(a){try{i(d.next(a))}catch(a){f(a)}}function h(a){try{i(d["throw"](a))}catch(a){f(a)}}function i(a){a.done?e(a.value):new c(function(b){b(a.value)}).then(g,h)}i((d=d.apply(a,b||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const serve_1=require("../serve"),auth_1=require("../util/auth"),models_1=require("../graph/users/models"),models_2=require("../graph/clients/models"),models_3=require("../graph/profiles/models"),graphql_server_koa_1=require("graphql-server-koa"),schema_1=require("../graph/schema"),request_1=require("../graph/request"),jsonwebtoken_1=require("jsonwebtoken"),config=require("config"),util_1=require("../util/util"),TOKEN_EXPIRATION_TIME=300,REFRESH_TOKEN_EXPIRATION_TIME=604800,graphQLHandler=graphql_server_koa_1.graphqlKoa((a)=>{return{schema:schema_1.default,context:request_1.createGraphQLContext(a)}}),graphQLUIHandler=graphql_server_koa_1.graphiqlKoa({endpointURL:"/api/graph"});class ApiErrorHandler{handleError({context:a,error:b}){const{response:c}=a;b&&b instanceof serve_1.ServerError?(c.body=b.opaque?{error:!0,message:"Internal server error."}:{error:!0,message:b.message},c.status=200):(c.body="Unknown internal server error.",c.status=500)}}exports.ApiErrorHandler=ApiErrorHandler;const apiErrorHandlerInstance=new ApiErrorHandler;class ApiController extends serve_1.Controller{refresh({context:a,app:b,next:c}){return __awaiter(this,void 0,void 0,function*(){yield b.koaBody(a,c);const{request:d,response:e}=a,f=serve_1.requireField(d.body,"refreshToken"),g=yield this.verifyTokenForLogin(f),h=yield auth_1.generateToken(g,TOKEN_EXPIRATION_TIME),i=yield auth_1.generateToken(g,REFRESH_TOKEN_EXPIRATION_TIME);e.body={token:h,expiresIn:TOKEN_EXPIRATION_TIME,refresh:i}})}login({context:a,app:b,next:c}){return __awaiter(this,void 0,void 0,function*(){yield b.koaBody(a,c);const{request:d,response:e}=a,f=util_1.trimIfString(serve_1.requireStringField(d.body,"email")),g=serve_1.requireStringField(d.body,"password"),h=new models_1.Users,i=yield h.getByEmail(f);if(console.log("user: ",i),!i||!(yield auth_1.comparePassword(i.password,g)))throw new serve_1.ServerError(!1,"failed-login","Failed to login.");const j=yield auth_1.generateToken(i.uuid,TOKEN_EXPIRATION_TIME),k=yield auth_1.generateToken(i.uuid,REFRESH_TOKEN_EXPIRATION_TIME);e.body={token:j,expiresIn:TOKEN_EXPIRATION_TIME,refresh:k}})}signup({context:a,app:b,next:c}){return __awaiter(this,void 0,void 0,function*(){yield b.koaBody(a,c);const{request:d,response:e}=a,f=util_1.trimIfString(serve_1.requireStringField(d.body,"clientName")),g=util_1.trimIfString(serve_1.requireStringField(d.body,"email")),h=util_1.trimIfString(serve_1.requireStringField(d.body,"firstName")),i=util_1.trimIfString(serve_1.requireStringField(d.body,"lastName")),j=serve_1.requireStringField(d.body,"password");if("string"!=typeof f||1>f.length)throw new serve_1.ServerError(!1,"bad-cred","Must provide organization name.");else if("string"!=typeof g||1>g.length||!g.match(/.+@.+/))throw new serve_1.ServerError(!1,"bad-cred","Bad email address.");else if("string"!=typeof h||1>h.length)throw new serve_1.ServerError(!1,"bad-cred","Must provide first name.");else if("string"!=typeof i||1>i.length)throw new serve_1.ServerError(!1,"bad-cred","Must provide last name.");else if("string"!=typeof j||6>j.length)throw new serve_1.ServerError(!1,"bad-cred","Password must be at least 6 characters long.");const k=new models_1.Users,l=new models_2.Clients,m=new models_3.Profiles,n=yield auth_1.preparePassword(j),o=!!(yield k.getByEmail(g));if(o)throw new serve_1.ServerError(!1,"email-used","The email is already in use.");const p=yield l.createClient(f),q=yield k.createUser(p.uuid,g,n,models_1.UserRoles.USER);yield m.initUserProfile(q.uuid,h,i),e.body={userId:q.uuid,clientId:p.uuid}})}graphPost({context:a,next:b,app:c}){return __awaiter(this,void 0,void 0,function*(){let d=a.request.get("Authorization");if(!d&&c.useCookieAuth&&(d=a.session["fcalc-token"]),d&&d.startsWith("Bearer ")){const e=d.substr(7),f=yield this.verifyTokenForLogin(e);return a._meta_user_id=f,yield c.koaBody(a,()=>Promise.resolve(null)),void(yield graphQLHandler(a,b))}throw new serve_1.ServerError(!1,"auth-required","Authorization is required to use this endpoint.")})}graphGet({context:a,next:b,app:c}){return __awaiter(this,void 0,void 0,function*(){let d=a.request.get("Authorization");if(!d&&c.useCookieAuth&&(d=a.session["fcalc-token"]),d&&d.startsWith("Bearer ")){const e=d.substr(7),f=yield this.verifyTokenForLogin(e);return a._meta_user_id=f,yield c.koaBody(a,()=>Promise.resolve(null)),void(yield graphQLHandler(a,b))}throw new serve_1.ServerError(!1,"auth-required","Authorization is required to use this endpoint.")})}graphOptions({context:a}){return __awaiter(this,void 0,void 0,function*(){a.response.body="",a.response.status=200})}graphiql({context:a,app:b,reroute:c}){return __awaiter(this,void 0,void 0,function*(){if(b.enableGraphQLGUI){const c=config.get("graphiql"),d=new models_1.Users,e=yield d.getByEmail(c.loginEmail);if(!e||!(yield auth_1.comparePassword(e.password,c.loginPassword)))throw new serve_1.ServerError(!1,"failed-login","Failed to login.");const f=yield auth_1.generateToken(e.uuid,216000);a.session["fcalc-token"]="Bearer "+f,yield b.koaBody(a,()=>Promise.resolve(null)),yield graphQLUIHandler(a)}else return void(c.path="/404")})}getErrorHandler(){return apiErrorHandlerInstance}verifyTokenForLogin(a){return __awaiter(this,void 0,void 0,function*(){try{return yield auth_1.verifyToken(a)}catch(a){if(a instanceof jsonwebtoken_1.TokenExpiredError)throw new serve_1.ServerError(!1,"expired-token","Authentication token has expired.");else throw new serve_1.ServerError(!1,"bad-token","Bad authentication token.")}})}}__decorate([serve_1.post("/api/refresh")],ApiController.prototype,"refresh",null),__decorate([serve_1.post("/api/login")],ApiController.prototype,"login",null),__decorate([serve_1.post("/api/register")],ApiController.prototype,"signup",null),__decorate([serve_1.post("/api/graph")],ApiController.prototype,"graphPost",null),__decorate([serve_1.get("/api/graph")],ApiController.prototype,"graphGet",null),__decorate([serve_1.options("/api/:endpoint(\\w+)")],ApiController.prototype,"graphOptions",null),__decorate([serve_1.get("/api/gui")],ApiController.prototype,"graphiql",null),exports.default=ApiController;