"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Path=require("path"),Pug=require("pug"),FileSystem=require("fs"),logger_1=require("./logger"),lru_cache_1=require("../util/lru-cache");class ViewRenderer{constructor(a){this.options={viewRoot:"",prettyViews:!1,renderFunctionCache:new lru_cache_1.default({maxSize:64,maxAge:0,size:()=>1})},this.watcher=null,a&&(this.options=Object.assign(this.options,a))}set viewRoot(a){this.options.viewRoot=a}getViewFile(a){let b=Path.resolve(this.options.viewRoot,a);return b.endsWith(".pug")||(b+=".pug"),b}getRenderFunction(a){const b=this.getViewFile(a);if(FileSystem.existsSync(b)){const a=Pug.compileFile(b,{filename:b,basedir:this.options.viewRoot,doctype:"html",pretty:this.options.prettyViews});return a}throw Error(`Failed to find view '${a}'. File '${b}' does not exist.`)}render(a,b){let c=this.options.renderFunctionCache.get(a);return c||(logger_1.default.verbose("Creating render function for view `%s`.",a),c=this.getRenderFunction(a),this.options.renderFunctionCache.set(a,c)),c(b)}watchViewRootForChanges(){this.watcher=FileSystem.watch(this.options.viewRoot,{persistent:!1,recursive:!0},(a,b)=>{if(!b)return logger_1.default.error("File name not provided to the watcher. Stopping..."),void this.stopWatchingViewrootForChanges();let c,d=b.toString();c=d.toLowerCase().endsWith(".pug")?d.substr(0,d.length-4):d,logger_1.default.debug("View changed: `%s`",c),this.options.renderFunctionCache&&(this.options.renderFunctionCache.delete(d),this.options.renderFunctionCache.delete(c))}),logger_1.default.info(`Watching views for changes at ${this.options.viewRoot}.`)}stopWatchingViewrootForChanges(){this.watcher&&(this.watcher.close(),this.watcher=null,logger_1.default.info(`No longer watching views for changes at ${this.options.viewRoot}.`))}}exports.ViewRenderer=ViewRenderer;