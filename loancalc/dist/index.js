"use strict";var __awaiter=this&&this.__awaiter||function(a,b,c,d){return new(c||(c=Promise))(function(e,f){function g(a){try{i(d.next(a))}catch(a){f(a)}}function h(a){try{i(d["throw"](a))}catch(a){f(a)}}function i(a){a.done?e(a.value):new c(function(b){b(a.value)}).then(g,h)}i((d=d.apply(a,b||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const serve_1=require("./serve"),serve_2=require("./serve"),Path=require("path"),Koa=require("koa"),KoaBody=require("koa-body"),KoaSession=require("koa-session"),enforceHttps=require("koa-sslify"),config=require("config"),serve_3=require("./serve"),server_logger_1=require("./util/server-logger"),index_1=require("./controllers/index"),calculator_1=require("./controllers/calculator"),public_1=require("./controllers/public"),api_1=require("./controllers/api"),upload_1=require("./controllers/upload"),debug_1=require("./controllers/debug"),integration_1=require("./controllers/integration"),app_queue_1=require("./workers/app-queue");class Server{constructor(a,b,c){this.port=a;const d=[new index_1.default,new calculator_1.default,new public_1.default,new api_1.default,new upload_1.default,new integration_1.default];config.get("server.enableDebugController")&&d.push(new debug_1.default),this.appObject={queue:null,enableGraphQLGUI:c,useCookieAuth:b,koaBody:KoaBody({multipart:!0}),router:new serve_1.Router(d),views:new serve_2.ViewRenderer({viewRoot:Path.resolve(__dirname,"..","views")})},"development"===process.env.NODE_ENV&&this.appObject.views.watchViewRootForChanges();this.app=new Koa,this.app.keys=["4oqugh4op4hy03nragirt5hoyqm6a562"],config.get("server.forceSSL")&&(serve_3.Logger.warn("Force SSL is turned off."),this.app.use(enforceHttps({trustProtoHeader:!0,port:config.get("server").sslPort}))),this.app.use(server_logger_1.default()),this.app.use(KoaSession({key:"lcalc:sess",maxAge:259200000,overwrite:!0,httpOnly:!0,signed:!0,rolling:!1},this.app)),this.app.use(serve_1.createRouterMiddlewareFn(this.appObject)),this.app.proxy=!0}start(){return __awaiter(this,void 0,void 0,function*(){serve_3.Logger.info("Starting application at http://localhost:%d",this.port),this.appObject.queue=yield app_queue_1.createQueueProducer(),this.app.listen(this.port)})}}exports.Server=Server;const serverConfig=config.get("server");new Server(serverConfig.port,serverConfig.useCookieAuth,serverConfig.enableGraphQLGUI).start().then(()=>{serve_3.Logger.info("Server started successfully.")},(a)=>{serve_3.Logger.error("Error while starting server: ",a)});