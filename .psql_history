\q
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
\q
CREATE EXTENSION citext;
\q
SELECT * FROM users;
\q
SELECT * FROM calc_events;
\q
SELECT * FROM calc_events;
clearexit
\q
select branding_img from clients;
clear;
select uuid, branding_img from clients;
\q
SELECT name, branding_img from clients;
\q
UPDATE clients SET branding_img = 'a935a68b-c3fa-4062-9446-5e82ff33fb38.png' WHERE name = 'PCT Federal Credit Union';
UPDATE clients SET branding_img = 'f3b9c7c7-aafc-4866-8db4-be7850faa5f6.png' WHERE name = 'Santander';
\q
SELECT * FROM leads;
SELECT first_name, last_name, created FROM leads;
\q
CREATE OR REPLACE FUNCTION push_calc_event_at(    _visitor_uuid UUID,    _session_uuid UUID,    _calculator_uuid UUID,    _client_uuid UUID,    _o_event_type VARCHAR(128),    _payload JSON,    create_time TIMESTAMP WITH TIME ZONE) RETURNS INTEGER AS $$DECLARE    event_id INTEGER;    _event_type VARCHAR(128);BEGIN    IF EXISTS (        SELECT 1 FROM calc_events        WHERE            calc_events.visitor_uuid = _visitor_uuid AND            calc_events.session_uuid = _session_uuid AND            calc_events.calculator_uuid = _calculator_uuid AND            calc_events.event_type = _o_event_type || '.unique'    ) THEN -- Not Unique        _event_type := _o_event_type;    ELSE -- Unique        _event_type := _o_event_type || '.unique';    END IF;    create_time := now();    -- Insert the full event into the events table.    INSERT INTO calc_events(visitor_uuid, session_uuid, calculator_uuid, client_uuid, event_type, payload)    VALUES (        _visitor_uuid, _session_uuid,         _calculator_uuid, _client_uuid,         _event_type,        _payload)    RETURNING id INTO event_id;    -- By Calculator By Hour:    INSERT INTO calc_events_by_hour (event_count, event_type, calculator_uuid, hour)        VALUES (1, _event_type, _calculator_uuid, date_trunc('hour', create_time))        ON CONFLICT (event_type, calculator_uuid, hour) DO UPDATE        SET event_count = calc_events_by_hour.event_count + excluded.event_count;    -- By Calculator By Day    INSERT INTO calc_events_by_day (event_count, event_type, calculator_uuid, day)        VALUES (1, _event_type, _calculator_uuid, date_trunc('day', create_time))        ON CONFLICT (event_type, calculator_uuid, day) DO UPDATE        SET event_count = calc_events_by_day.event_count + excluded.event_count;    -- By Client By Hour    INSERT INTO client_calc_events_by_hour (event_count, event_type, client_uuid, hour)        VALUES (1, _event_type, _client_uuid, date_trunc('hour', create_time))        ON CONFLICT (event_type, client_uuid, hour) DO UPDATE        SET event_count = client_calc_events_by_hour.event_count + excluded.event_count;        -- By Client By Day    INSERT INTO client_calc_events_by_day (event_count, event_type, client_uuid, day)        VALUES (1, _event_type, _client_uuid, date_trunc('day', create_time))        ON CONFLICT (event_type, client_uuid, day) DO UPDATE        SET event_count = client_calc_events_by_day.event_count + excluded.event_count;    RETURN event_id;END$$ LANGUAGE plpgsql;
\q
CREATE OR REPLACE FUNCTION push_calc_event_at(    _visitor_uuid UUID,    _session_uuid UUID,    _calculator_uuid UUID,    _client_uuid UUID,    _o_event_type VARCHAR(128),    _payload JSON,    create_time TIMESTAMP WITH TIME ZONE) RETURNS INTEGER AS $$DECLARE    event_id INTEGER;    _event_type VARCHAR(128);BEGIN    IF EXISTS (        SELECT 1 FROM calc_events        WHERE            calc_events.visitor_uuid = _visitor_uuid AND            calc_events.session_uuid = _session_uuid AND            calc_events.calculator_uuid = _calculator_uuid AND            calc_events.event_type = _o_event_type || '.unique'    ) THEN -- Not Unique        _event_type := _o_event_type;    ELSE -- Unique        _event_type := _o_event_type || '.unique';    END IF;    -- Insert the full event into the events table.    INSERT INTO calc_events(visitor_uuid, session_uuid, calculator_uuid, client_uuid, event_type, payload)    VALUES (        _visitor_uuid, _session_uuid,         _calculator_uuid, _client_uuid,         _event_type,        _payload)    RETURNING id INTO event_id;    -- By Calculator By Hour:    INSERT INTO calc_events_by_hour (event_count, event_type, calculator_uuid, hour)        VALUES (1, _event_type, _calculator_uuid, date_trunc('hour', create_time))        ON CONFLICT (event_type, calculator_uuid, hour) DO UPDATE        SET event_count = calc_events_by_hour.event_count + excluded.event_count;    -- By Calculator By Day    INSERT INTO calc_events_by_day (event_count, event_type, calculator_uuid, day)        VALUES (1, _event_type, _calculator_uuid, date_trunc('day', create_time))        ON CONFLICT (event_type, calculator_uuid, day) DO UPDATE        SET event_count = calc_events_by_day.event_count + excluded.event_count;    -- By Client By Hour    INSERT INTO client_calc_events_by_hour (event_count, event_type, client_uuid, hour)        VALUES (1, _event_type, _client_uuid, date_trunc('hour', create_time))        ON CONFLICT (event_type, client_uuid, hour) DO UPDATE        SET event_count = client_calc_events_by_hour.event_count + excluded.event_count;        -- By Client By Day    INSERT INTO client_calc_events_by_day (event_count, event_type, client_uuid, day)        VALUES (1, _event_type, _client_uuid, date_trunc('day', create_time))        ON CONFLICT (event_type, client_uuid, day) DO UPDATE        SET event_count = client_calc_events_by_day.event_count + excluded.event_count;    RETURN event_id;END$$ LANGUAGE plpgsql;
\q
SELECT * FROM calc_events;
\q
SELECT * FROM db_files;
\q
SELECT * FROM calc_events;
SELECT count(*) FROM calc_events;
SELECT count(*) FROM calc_events WHERE calc_events.event_type = "visit";
SELECT * FROM calc_events;
SELECT * FROM calc_events;
SELECT count(*) FROM calc_events WHERE calc_events.event_type = "visit.unique";
SELECT count(*) FROM calc_events WHERE calc_events.event_type = 'visit.unique';
SELECT count(*) FROM calc_events WHERE calc_events.event_type = 'visit';
SELECT count(*) FROM calc_events WHERE calc_events.event_type = 'visit.unique';
SELECT count(*) FROM calc_events WHERE calc_events.event_type = 'visit.unique' | calc_events.event_type = 'visit';
SELECT count(*) FROM calc_events WHERE calc_events.event_type = 'visit.unique' OR calc_events.event_type = 'visit';
\q
SELECT * FROM facebook_conn;
DELETE FROM facebook_conn;
\q
\dt
\q
\dt
\q
\q
\l
\c postgres
\dt
\c template0
\c template1
\dt
\c loancalc
\dt
\q
q
\q
\dt
\list
!
\du
Q
\q
\list
\connect loancalc
\list
\c
\dt
SELECT * FROM calculators;
\q
